spring:
  application:
    name: sdemo1
  # 디버깅 모드에서 파라미터 정보 활성화
  main:
    allow-bean-definition-overriding: true
  # JVM 옵션 설정
  jvm:
    args: -parameters
  thymeleaf:
    prefix: classpath:/templates/ #Thymeleaf 템플릿 파일 경로입니다. (/templates/ 폴더를 기준으로 설정)
    suffix: .html
    cache: false  # 템플릿 캐싱 비활성화하여 변경 사항이 즉시 반영되도록 설정 (개발 시 유용)
  servlet:
    multipart:
      max-file-size: 10MB
      max-request-size: 10MB
  datasource:
    url: ${DB_URL}
    driver-class-name: ${DB_DRIVER:com.mysql.cj.jdbc.Driver}
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
    connection-timeout: 10000 # 10초로 늘리기
  jpa:
    hibernate:
      ddl-auto: create
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL8Dialect
        format_sql: true
        use_sql_comments: true
        jdbc:
          time_zone: UTC
        types:
          java-time:
            jdbc-type: TIMESTAMP
  # h2:
    # console:
      # enabled: false
      # path: /h2-console
  
  # config:
    # import: optional:file:/app/config/dev-api.env

  # Redis 설정
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      database: ${REDIS_DATABASE:0}
      timeout: ${REDIS_TIMEOUT:2000ms}
      lettuce:
        pool:
          max-active: 8
          max-idle: 8
          min-idle: 0
          max-wait: -1
      # Redis Key Events 활성화
      notify-keyspace-events: "Ex"
      # Redis Repository 비활성화
      repositories:
        enabled: false

  # RabbitMQ 설정
  rabbitmq:
    host: ${RABBITMQ_HOST:localhost}
    port: ${RABBITMQ_PORT:5672}
    username: ${RABBITMQ_USERNAME:guest}
    password: ${RABBITMQ_PASSWORD:guest}
    listener:
      simple:
        concurrency: ${RABBITMQ_CONCURRENCY:5}
        max-concurrency: ${RABBITMQ_MAX_CONCURRENCY:10}
        prefetch: ${RABBITMQ_PREFETCH:1}
        default-requeue-rejected: ${RABBITMQ_DEFAULT_REQUEUE_REJECTED:false}

# JWT 설정
jwt:
  secret: ${JWT_SECRET}
  access-token-validity-in-seconds: 1209600 #테스트를 위해 14일로 설정 #300 5분 
  refresh-token-validity-in-seconds: 2592000  # 30일
  cookie:
    refresh-token:
      name: refreshToken
      http-only: true
      secure: true
      path: /
      max-age: 2592000 # 1209600  # 14일
      same-site: None
      domain: localhost

logging:
  level:
    com.sdemo1: DEBUG
    org.springframework.web: INFO
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql: TRACE
    com.sdemo1.config.AsyncConfig: INFO  # 프로덕션에서는 INFO 레벨만 
    org.springframework.amqp: DEBUG
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
  file:
    name: /var/log/application.log
    max-size: 10MB
    max-history: 30

server:
  address: ${SERVER_ADDRESS:0.0.0.0}
  port: ${SERVER_PORT:8080}
  shutdown: ${SERVER_SHUTDOWN:graceful}
  error:
    include-message: ${SERVER_ERROR_INCLUDE_MESSAGE:always}
    include-binding-errors: ${SERVER_ERROR_INCLUDE_BINDING_ERRORS:always}
    include-stacktrace: ${SERVER_ERROR_INCLUDE_STACKTRACE:never}
    include-exception: ${SERVER_ERROR_INCLUDE_EXCEPTION:false}
  mvc:
    throw-exception-if-no-handler-found: ${SERVER_MVC_THROW_EXCEPTION:true}
  web:
    resources:
      add-mappings: ${SERVER_WEB_RESOURCES_ADD_MAPPINGS:false}
    content-type:
      charset: UTF-8

# Swagger/OpenAPI 설정
springdoc:
  api-docs:
    path: /v3/api-docs
    enabled: true
  swagger-ui:
    path: /swagger-ui.html
    enabled: true
    operations-sorter: alpha
    tags-sorter: alpha
    try-it-out-enabled: true
    filter: true
    display-request-duration: true

# 대기열 설정
queue:
  concert:
    # Exchange 설정
    exchanges:
      waiting: ${QUEUE_EXCHANGE_WAITING:concert.waiting.exchange}
      processing: ${QUEUE_EXCHANGE_PROCESSING:concert.processing.exchange}
      dead-letter: ${QUEUE_EXCHANGE_DEAD_LETTER:concert.dead.letter.exchange}
    # 큐 이름 설정
    queues:
      waiting-default: ${QUEUE_WAITING_DEFAULT:concert.waiting.default}
      processing-default: ${QUEUE_PROCESSING_DEFAULT:concert.processing.default}
      dead-letter: ${QUEUE_DEAD_LETTER:concert.dead.letter}
    # 라우팅 키 설정
    routing-keys:
      processing: ${QUEUE_ROUTING_KEY_PROCESSING:processing}
      waiting: ${QUEUE_ROUTING_KEY_WAITING:waiting}
      dead-letter: ${QUEUE_ROUTING_KEY_DEAD_LETTER:dead.letter}
    # 예매 시작 전 대기열 입장 가능 시간 (시간)
    join-start-hours: ${QUEUE_JOIN_START_HOURS:4}
    # 예매 시작 후 입장 간격 (초)
    entry-interval-seconds: ${QUEUE_ENTRY_INTERVAL_SECONDS:30}
    # 예매 시작 후 그룹당 동시 입장 가능한 인원 수
    group-size: ${QUEUE_GROUP_SIZE:3}
    # 최대 대기 시간 (분)
    max-wait-time-minutes: ${QUEUE_MAX_WAIT_TIME_MINUTES:120}
    # 좌석 점유 유지 시간 (분)
    hold-duration-minutes: ${QUEUE_HOLD_DURATION_MINUTES:10}
    # 예상 대기 시간 계산 시 최대 시간 (분)
    max-estimated-wait-time: ${QUEUE_MAX_ESTIMATED_WAIT_TIME:120}
  # Redis TTL 설정 (분 단위)
  redis:
    ttl:
      waiting-minutes: ${QUEUE_REDIS_TTL_WAITING_MINUTES:240}   # 대기열 대기 상태 TTL (4시간, 분 단위)
      ready-minutes: ${QUEUE_REDIS_TTL_READY_MINUTES:60}       # 예매 입장 준비 상태 TTL (60분)
      entered-minutes: ${QUEUE_REDIS_TTL_ENTERED_MINUTES:60}     # 예매 페이지 입장 완료 상태 TTL (60분)
